- schedules.each do |schedule|
  .card.shadow-xl.p-4.flex.mb-4.bg-base-200.my-8.card-container
    .flex.flex-col.md:flex-row
      = image_tag "https://via.placeholder.com/150", alt: "Product", class: "w-full md:w-48 h-48 object-cover mb-4 md:mb-0 md:mr-4"
      .flex-1
        .flex.flex-col.justify-center.mb-2
          h3.font-bold.text-xl Xe Tuấn Hưng
          h3.text-gray-600.text-md.mt-2.opacity-80 #{schedule.coach.coach_type.capitalize} #{schedule.coach.capacity} seats
        .flex.flex-col.justify-start.text-sm.text-gray-600.mt-6.gap-2
          .relative
            svg.absolute.top-1 xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-locate-fixed"
              line(x1="2" x2="5" y1="12" y2="12")
              line(x1="19" x2="22" y1="12" y2="12")
              line(x1="12" x2="12" y1="2" y2="5")
              line(x1="12" x2="12" y1="19" y2="22")
              circle(cx="12" cy="12" r="7")
              circle(cx="12" cy="12" r="3")
            span.text-lg.ml-6
              | #{schedule.departure_time.strftime("%H:%M")} - 
              = schedule.route.start_location.name
          .relative
            svg.absolute xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-ellipsis-vertical"
              circle(cx="12" cy="12" r="1")
              circle(cx="12" cy="5" r="1")
              circle(cx="12" cy="19" r="1")
            span.text-lg.ml-8 8h
          .relative
            svg.absolute.top-1 xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin"
              path(d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0")
              circle(cx="12" cy="10" r="3")
            span.text-lg.ml-6
              | #{schedule.departure_time.strftime("%H:%M")} - 
              = schedule.route.end_location.name
      .flex.flex-col.items-end.justify-between.md:items-start.md:text-right.mt-4.md:mt-0
        .w-full.text-end
          span.text-2xl.text-primary.font-semibold.text-end.md:pr-2
            | #{format_currency_vnd(schedule.price)}
        div.flex.flex-col.md:flex-row.justify-between.md:justify-start.items-center.md:items-end.w-full
        .flex.w-full.items-center.justify-end.mb-4.mt-4.md:mt-6.md:mb-0
          span.text-gray-500.text-end Available: 37 empty seats
        .flex.justify-between.items-center.w-full.md:w-auto.md:justify-start
          .relative
            button.text-blue-500.pr-4.underline.w-full.md:max-w-52.hidden.md:mr-5.md:block type="button" onclick="toggleDropdown('dropdown-#{schedule.id}', this)" View details
          = render partial: 'route_pages/shared/dropdown_route_detail', locals: { schedule: schedule }
          = render partial: 'route_pages/shared/dropdown_book', locals: { schedule: schedule, booking: booking }
          button.btn.btn-accent.w-full.md:w-24.mt-4.md:mt-0 data-action="book" onclick="checkAuthenticationAndBook('#{schedule.id}', this)" type="button" Book

javascript:
  function checkAuthenticationAndBook(scheduleId, button) {
    // Check if the user is signed in using Devise's helper
    // const userSignedIn = document.body.getAttribute('data-user-signed-in') === 'true';

    // // If the user is not signed in, alert them and redirect to the login page
    // if (!userSignedIn) {
    //   window.location.href = "/users/sign_in";  // Redirect to Devise login page
    //   return;  // Stop the rest of the logic
    // }

    // If the user is signed in, proceed to toggle the dropdown for booking
    toggleDropdown(`dropdown-book-${scheduleId}`, button);
  }

  function toggleDropdown(dropdownId, button) {
    const dropdownMenu = document.getElementById(dropdownId);
    const cardContainer = button.closest('.card-container');
  
    if (dropdownMenu && cardContainer) {
      const allDropdowns = document.querySelectorAll('.dropdown-content');
      const allCardContainers = document.querySelectorAll('.card-container');
  
      // Hide all dropdowns and reset card margins
      allDropdowns.forEach((dropdown) => {
        if (dropdown !== dropdownMenu) {
          dropdown.classList.add('hidden');
        }
      });
  
      allCardContainers.forEach((container) => {
        container.style.marginBottom = '20px'; // Default margin
        container.classList.remove('dropdown-open');
      });
  
      // Check if the clicked dropdown is already visible

      if (dropdownMenu.classList.contains('hidden')) {
        // Show the dropdown
        dropdownMenu.classList.remove('hidden');
        const dropdownHeight = dropdownMenu.offsetHeight;
        cardContainer.style.marginBottom = `${dropdownHeight + 40}px`; // Adjust margin for the open dropdown
        cardContainer.classList.add('dropdown-open'); // Mark the card as open
  
        // Set Pick/Drop as the default tab
        const pickupTabId = dropdownMenu.querySelector('[id^="pickup-"]')?.id;
        if (pickupTabId) {
          showTab(pickupTabId);
  
          const tabs = dropdownMenu.querySelectorAll('[role="tab"]');
          tabs.forEach((tab) => {
            tab.classList.remove('tab-active');
          });
  
          const pickdropTab = dropdownMenu.querySelector(`[onclick="showTab('${pickupTabId}')"]`);
          if (pickdropTab) {
            pickdropTab.classList.add('tab-active');
          }
        }
      } else {
        // Hide the dropdown if it's already visible
          dropdownMenu.classList.add('hidden');
          cardContainer.style.marginBottom = '20px'; // Reset margin to default
          cardContainer.classList.remove('dropdown-open'); // Remove the open class
      }
    }
  }



  function showTab(tabId) {
    const selectedTab = document.getElementById(tabId);
    if (selectedTab) {
      const parentDropdown = selectedTab.closest('.dropdown-content');
      if (parentDropdown) {
        const allTabs = parentDropdown.querySelectorAll('[role="tabpanel"]');
        allTabs.forEach((tab) => {
          tab.classList.add('hidden');
        });
      }

      selectedTab.classList.remove('hidden');

      const tabs = parentDropdown.querySelectorAll('[role="tab"]');
      tabs.forEach((tab) => {
        tab.classList.remove('tab-active');
      });

      const activeTab = parentDropdown.querySelector(`[onclick="showTab('${tabId}')"]`);
      if (activeTab) {
        activeTab.classList.add('tab-active');
      }
    }
  }
